(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{"/5+L":function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RayTracingPhotonGenerator=e.RayTracingPhotonVelocityGenerator=e.RayTracer=void 0;var o=i("4kaQ"),r=i("Womt"),n=i("Uj6v"),s=i("wBSO"),a=i("L5Ia"),c=i("anZJ"),h=function(){function t(t,e,i,o,n,s){void 0===e&&(e=new r.Vector3),void 0===i&&(i=new r.Vector3(0,0,1)),void 0===o&&(o=Math.PI/4),void 0===n&&(n=100),void 0===s&&(s=299792458),this.DIST_TO_PLATE=1,this.ASPECT_RATIO=1,this.hole=e,this.createPlate(o,n),this.scene=t,this.image=new r.DataTexture(this.plate.getImage(),this.plate.resolution.x,this.plate.resolution.y,r.RGBAFormat),this.photo=new r.MeshBasicMaterial,this.photo.map=this.image,this.mesh=new r.Mesh(new r.PlaneGeometry(10,10),this.photo),this.mesh.position.copy(this.hole),this.rotation=(new r.Quaternion).setFromUnitVectors(new r.Vector3(0,0,1),i.normalize()),this.createGenerator(s),this.emitter=new c.VariableRayEmitter(this.getResolution(),this,this.generator)}return t.prototype.objectWasHit=function(t,e){this.emitter.objectWasHit(t,e)},t.prototype.getWidth=function(){return this.plate.width},t.prototype.getHeight=function(){return this.plate.height},t.prototype.getRotation=function(){return this.rotation},t.prototype.getDistanceToCanvas=function(){return this.DIST_TO_PLATE},t.prototype.getPosition=function(){return this.hole.clone()},t.prototype.setCustomizer=function(t){this.customizer=t},t.prototype.createGenerator=function(t){this.generator=new u(this.scene,t)},t.prototype.createPlate=function(t,e){var i=2*this.DIST_TO_PLATE*Math.tan(t),n=this.ASPECT_RATIO*i,s=this.ASPECT_RATIO*e,a=new o.PhotographicPlate(i,n,e,s,new r.Vector3(0,0,this.DIST_TO_PLATE),new r.Vector3(0,0,-1));this.plate=a},t.prototype.getPhoto=function(){return this.mesh},t.prototype.getResolution=function(){return this.plate.resolution},t.prototype.update=function(){this.customizer&&this.customizer.update(),this.image.needsUpdate=!0},t.prototype.emitPhotons=function(t){var e=this;t||(t=this.emitter),t.emit().forEach((function(t){e.postEmit(t)}))},t.prototype.emitFrom=function(t,e){var i=this.emitter.emitFrom(t,e);this.postEmit(i)},t.prototype.emitFromRandomPixel=function(){var t=Math.floor(Math.random()*this.plate.resolution.x),e=Math.floor(Math.random()*this.plate.resolution.x);this.emitFrom(t,e)},t.prototype.postEmit=function(t){this.customizer&&null!=t&&this.customizer.postEmit(t)},t.prototype.setPixel=function(t,e,i,o){this.plate.setPixel(t,e,i)},t}();e.RayTracer=h;var p=function(){function t(t){void 0===t&&(t=299792458),this.c=299792458,this.c=t}return t.prototype.parameter=function(t){this.dir=t.normalize()},t.prototype.generate=function(){var t=this.dir.clone();return t.multiplyScalar(this.c),t},t}();e.RayTracingPhotonVelocityGenerator=p;var u=function(){function t(t,e){void 0===e&&(e=299792458),this.x=0,this.y=0,this.generator=new n.PhotonGenerator,this.velocity_generator=new p(e),this.generator.setVelocityGenerator(this.velocity_generator),this.generator.setPositionGenerator(new s.FixedPositionGenerator(new r.Vector3)),this.scene=t}return t.prototype.parameter=function(t,e,i){this.x=t,this.y=e,this.velocity_generator.parameter(i)},t.prototype.generate=function(){var t=this.generator.generate(),e=new a.PixelRay(this.scene,new r.Vector2(this.x,this.y));return e.copy(t),e},t}();e.RayTracingPhotonGenerator=u},"/7QA":function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),(new(i("lelv").BlackHoleStarter)).animate()},"4kaQ":function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PhotographicPlate=e.Photograph=void 0;var o=i("Womt"),r=i("fyR2"),n=function(){function t(t){this.plate=t,this.image=new o.DataTexture(this.plate.getImage(),t.resolution.x,t.resolution.y,o.RGBAFormat),this.photo=new o.MeshBasicMaterial,this.photo.map=this.image,this.mesh=new o.Mesh(new o.PlaneGeometry(10,10),this.photo)}return t.prototype.getPhoto=function(){return this.mesh},t.prototype.update=function(t,e){this.plate.expose(t,e),this.image.needsUpdate=!0},t}();e.Photograph=n;var s=function(){function t(t,e,i,r,n,s){void 0===t&&(t=1),void 0===e&&(e=1),void 0===i&&(i=100),void 0===r&&(r=100),void 0===n&&(n=new o.Vector3),void 0===s&&(s=new o.Vector3(0,0,1)),this.width=t,this.height=e,this.position=n,this.normal=s.normalize(),this.resolution=new o.Vector2(i,r),this.data=new Uint8Array(4*i*r)}return t.prototype.getImage=function(){return this.data},t.prototype.expose=function(t,e){var i=this,n=(new o.Quaternion).setFromUnitVectors(this.normal,new o.Vector3(0,0,1)),s=[16,0,0,0];t.forEach((function(t){if(t.getType()==r.SpaceParticle.PHOTON){var a=t.getPosition(),c=(new o.Vector3).addVectors(t.getPosition(),t.getVelocity().multiplyScalar(e)),h=i.intersectsWithPlate(a,c);if(h.x!=Number.POSITIVE_INFINITY){var p=h.sub(i.position);p.applyQuaternion(n),p.x=i.width/2+p.x*i.resolution.x/i.width,p.y=i.height/2+p.y*i.resolution.y/i.height,p.x=4*Math.round(p.x),p.y=4*Math.round(p.y);var u=p.y*i.resolution.x+p.x;s.forEach((function(t,e){i.data[u+e]=Math.min(i.data[u+e]+t,255)}))}}}))},t.prototype.setPixel=function(t,e,i){var o=this;t=4*Math.floor(t);var r=(e=4*Math.floor(e))*this.resolution.x+t;i.forEach((function(t,e){o.data[r+e]=Math.min(o.data[r+e]+t,255)}))},t.prototype.intersectsWithPlate=function(t,e){var i=new o.Vector3(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),r=(new o.Vector3).subVectors(e,t),n=(new o.Vector3).subVectors(t,this.position).dot(this.normal),s=(new o.Vector3).subVectors(e,this.position).dot(this.normal);if(n*s>0)return i;if(0==n)return t;if(0==s)return e;var a=Math.abs(n)/(Math.abs(n)+Math.abs(s));i=t.add(r.multiplyScalar(a));var c=(new o.Vector3).subVectors(i,this.position);return(Math.abs(c.x)>this.width||Math.abs(c.y)>this.height)&&i.set(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),i},t}();e.PhotographicPlate=s},"4xLO":function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TimeProfile=void 0;var o=function(){function t(t,e){void 0===t&&(t="Method"),void 0===e&&(e=1),this.updateCount=0,this.updateEvery=e,this.name=t}return t.prototype.start=function(){this.startTime=(new Date).getTime()},t.prototype.stop=function(){var t=(new Date).getTime(),e=t-this.startTime;return this.startTime=t,this.updateCount++,this.updateCount>this.updateEvery&&(this.updateCount=0,this.print(),this.interval=0),this.interval+=e,this.interval},t.prototype.print=function(){console.log("%s took %s ms",this.name,this.interval)},t}();e.TimeProfile=o},"5OmT":function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RayTracingCollisionManager=void 0;var o=i("Womt"),r=i("bJLd"),n=function(){function t(t){this.raytracer=t,this.bg=new s(this.raytracer.getResolution().x,this.raytracer.getResolution().y,1)}return t.prototype.setRays=function(t){this.rays=t},t.prototype.setObstacles=function(t){this.obstacles=t,this.octree=new r.Octree(this.obstacles,new o.Vector3(-50,-50,-50),new o.Vector3(50,50,50),4,10)},t.prototype.updateParticleInOctree=function(t){},t.prototype.onCollision=function(t,e){var i=[200,0,0,0];i=this.dopplerShiftColor(i,t.getVelocity(),e.getVelocity()),this.raytracer.setPixel(e.getOriginPixel().x,e.getOriginPixel().y,i,new o.Vector3),this.raytracer.objectWasHit(e.getOriginPixel().x,e.getOriginPixel().y)},t.prototype.dopplerShiftColor=function(t,e,i){var o=i.clone().normalize(),r=e.dot(o),n=o.multiplyScalar(e.dot(o)).length()/i.length();return r>0?t[0]=Math.min(t[0]+Math.ceil(128*n),255):t[2]=Math.min(t[2]+Math.ceil(128*n),255),t},t.prototype.update=function(t){var e=this;this.rays.forEach((function(i){var r=i.getPosition(),n=i.getPosition().addScaledVector(i.getVelocity(),t);if(r.z<-45){var s=e.raytracer.getResolution().x/2+Math.floor(r.x/100*e.raytracer.getResolution().x),a=e.raytracer.getResolution().y/2+Math.floor(r.y/100*e.raytracer.getResolution().y);if(Math.random()<0&&e.bg.shouldFill(s,a)){i.onDeath();var c=[255,255,255,0];e.raytracer.setPixel(i.getOriginPixel().x,i.getOriginPixel().y,c,new o.Vector3)}}else{var h=e.octree.findRay(r,n);if(h)h.getObjects().forEach((function(t){if(t.intersectsWithRay(r,n,i.getRadius())){i.onDeath();e.onCollision(t,i)}}))}}))},t}();e.RayTracingCollisionManager=n;var s=function(){function t(t,e,i){this.pixels=new Array(t*e),this.dimensions=new o.Vector2(t,e),this.assign(i*(t*e))}return t.prototype.assign=function(t){for(var e=0;e<this.dimensions.x;e++)for(var i=0;i<this.dimensions.y;i++)if(e%16==0||i%16==0){var o=i*this.dimensions.x+e;this.pixels[o]=1}},t.prototype.shouldFill=function(t,e){var i=e*this.dimensions.x+t;return 1==this.pixels[i]},t}()},BNAQ:function(t,e,i){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0}),e.EllipticalParticleGenerator=void 0;var n=i("KD8D"),s=i("P8No"),a=i("bYUt"),c=i("t9Jl"),h=function(t){function e(e,i,o,r,n,a,h){var p=t.call(this)||this;return p.velocity_generator=new s.TangentialVelocityGenerator,p.position_generator=new c.EllipticalPositionGenerator(e,i,o,r,n,a),p.center=o,p.axis=a,p.mag=h,p}return r(e,t),e.prototype.setWidth=function(t){this.position_generator.setWidth(t)},e.prototype.generate=function(){var t=this.mass_min+Math.random()*(this.mass_max-this.mass_min),e=new a.Particle(t),i=this.position_generator.generate();this.velocity_generator.parameters(this.center,i,this.axis);var o=this.velocity_generator.generate();return o.multiplyScalar(this.mag),e.setVelocity(o.x,o.y,o.z),e.setPosition(i.x,i.y,i.z),e.setLifespan(this.lifespan),e},e}(n.ParticleGenerator);e.EllipticalParticleGenerator=h},DFd6:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.VisibleParticle=void 0;var o=i("Womt"),r=i("bYUt"),n=function(){function t(t,e,i,n,s){void 0===i&&(i="#ff0000"),void 0===n&&(n=1),void 0===s&&(s=1),this.name=e,this.geometry=new o.SphereBufferGeometry(1),this.material=new o.MeshBasicMaterial({color:i}),this.mesh=new o.Mesh(this.geometry,this.material),this.mesh.scale.set(n,n,n),this.particle=new r.Particle(s,n),this.color=i,this.scene=t,this.scene.add(this.mesh)}return t.prototype.intersectsWithBox=function(t,e){return this.particle.intersectsWithBox(t,e)},t.prototype.setRadius=function(t){return this.mesh.scale.set(t,t,t),this.particle.setRadius(t)},t.prototype.intersectsWithRay=function(t,e,i){return this.particle.intersectsWithRay(t,e,i)},t.prototype.isAlive=function(){return this.particle.isAlive()},t.prototype.copy=function(t){this.particle.copy(t),this.mesh.scale.set(this.particle.getRadius(),this.particle.getRadius(),this.particle.getRadius())},t.prototype.setType=function(t){return this.particle.setType(t)},t.prototype.getType=function(){return this.particle.getType()},t.prototype.update=function(){},t.prototype.getLifespan=function(){return this.particle.getLifespan()},t.prototype.setLifespan=function(t){return this.particle.setLifespan(t)},t.prototype.getAge=function(){return this.particle.getAge()},t.prototype.setAge=function(t){return this.particle.setAge(t)},t.prototype.position=function(t){return void 0!==t&&this.mesh.position.copy(t),this.mesh.position.clone()},t.prototype.setMass=function(t){this.particle.setMass(t)},t.prototype.getMass=function(){return this.particle.getMass()},t.prototype.getVelocity=function(){return this.particle.getVelocity()},t.prototype.getPosition=function(){return this.position()},t.prototype.setPosition=function(t,e,i){var r=this.position(new o.Vector3(t,e,i));return this.particle.setPosition(t,e,i),r},t.prototype.setVelocity=function(t,e,i){return this.particle.setVelocity(t,e,i)},t.prototype.getRadius=function(){return this.particle.getRadius()},t.prototype.destroy=function(){this.geometry.dispose(),this.material.dispose()},t.prototype.addLightSource=function(t){var e=new o.PointLight(t);this.mesh.add(e)},t.prototype.onDeath=function(){this.scene.remove(this.mesh),this.destroy(),this.particle.onDeath()},t}();e.VisibleParticle=n},KD8D:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ParticleGenerator=void 0;var o=i("Womt"),r=i("wBSO"),n=i("PeOb"),s=i("bYUt"),a=function(){function t(){this.position=new o.Vector3,this.lifespan=0,this.position_generator=new r.FixedPositionGenerator(this.position),this.velocity_generator=new n.RandomVelocityGenerator}return t.prototype.setVelocityGenerator=function(t){this.velocity_generator=t},t.prototype.setPositionGenerator=function(t){this.position_generator=t},t.prototype.generate=function(){var t=this.mass_min+Math.random()*(this.mass_max-this.mass_min),e=new s.Particle(t),i=this.velocity_generator.generate(),o=this.position_generator.generate();return e.setVelocity(i.x,i.y,i.z),e.setPosition(o.x,o.y,o.z),e.setLifespan(this.lifespan),e},t.prototype.setPosition=function(t){this.position.copy(t)},t.prototype.getPosition=function(){return this.position.clone()},t.prototype.setParameters=function(t,e,i){this.mass_max=e,this.mass_min=t,this.lifespan=i},t}();e.ParticleGenerator=a},L5Ia:function(t,e,i){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0}),e.PixelRay=void 0;var n=i("bYUt"),s=i("Womt"),a=function(t){function e(e,i){void 0===i&&(i=new s.Vector2);var o=t.call(this,0)||this;return o.origin=i,o}return r(e,t),e.prototype.getOriginPixel=function(){return this.origin},e.prototype.setOriginPixel=function(t,e){this.origin.set(t,e)},e}(n.Particle);e.PixelRay=a},P8No:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TangentialVelocityGenerator=void 0;var o=i("Womt"),r=function(){function t(){}return t.prototype.parameters=function(t,e,i){this.position=e,this.center=t,this.axis=i.normalize()},t.prototype.generate=function(){var t=(new o.Vector3).subVectors(this.position,this.center).normalize();return(new o.Vector3).crossVectors(t,this.axis)},t}();e.TangentialVelocityGenerator=r},PXhL:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PhotonVelocityGenerator=void 0;var o=i("Womt"),r=function(){function t(){this.c=299792458}return t.prototype.parameter=function(t){this.c=t},t.prototype.generate=function(){var t=new o.Vector3(2*Math.random()-1,2*Math.random()-1,2*Math.random()-1);return t.multiplyScalar(this.c),t},t}();e.PhotonVelocityGenerator=r},PeOb:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RandomVelocityGenerator=void 0;var o=i("Womt"),r=function(){function t(){}return t.prototype.generate=function(){return new o.Vector3(2*Math.random()-1,2*Math.random()-1,2*Math.random()-1)},t}();e.RandomVelocityGenerator=r},Uj6v:function(t,e,i){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0}),e.PhotonGenerator=void 0;var n=i("KD8D"),s=i("PXhL"),a=i("fyR2"),c=i("Womt"),h=function(t){function e(){var e=t.call(this)||this;return e.speedOfLight=299792458,e.velocity_generator=new s.PhotonVelocityGenerator,e.mass_max=0,e.mass_min=0,e.lifespan=0,e}return r(e,t),e.prototype.generate=function(){var e=t.prototype.generate.call(this);return e.setType(a.SpaceParticle.PHOTON),e.setRadius(.1),e},e.prototype.setSpeedOfLight=function(t){this.speedOfLight=t;var e=new s.PhotonVelocityGenerator;this.velocity_generator=e,e.parameter(t)},e.prototype.randomVelocity=function(){var t=new c.Vector3(Math.random(),Math.random(),Math.random());return t.normalize(),t.multiplyScalar(this.speedOfLight),t},e}(n.ParticleGenerator);e.PhotonGenerator=h},W87h:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GravityForce=void 0;var o=i("Womt"),r=function(){function t(t){this.G=t||1}return t.prototype.vec_length_squared=function(t){return t.x*t.x+t.y*t.y+t.z*t.z},t.prototype.apply=function(t,e){var i=t.getPosition().sub(e.getPosition()),r=1/this.vec_length_squared(i),n=new o.Vector3,s=new o.Vector3;if(r>0){var a=i.normalize();n=a.clone().multiplyScalar(-this.G*e.getMass()*r),s=a.clone().multiplyScalar(this.G*t.getMass()*r)}return[n,s]},t.calculate=function(t,e,i){return this.GRAVITATION_CONSTANT*t*i*i/(e*e*e)},Object.defineProperty(t.prototype,"G",{get:function(){return this._G},set:function(t){this._G=t},enumerable:!1,configurable:!0}),t.GRAVITATION_CONSTANT=66743e-15,t}();e.GravityForce=r},XZJ1:function(t,e,i){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0}),e.BlackHoleParticleSystem=void 0;var n=i("ltrx"),s=i("fyR2"),a=i("Womt"),c=i("Ysi0"),h=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.eventHorizon=Number.POSITIVE_INFINITY,e.eventHorizon2=Number.POSITIVE_INFINITY,e.myprofiler=new c.TimeProfiler,e}return r(e,t),e.prototype.setEventHorizon=function(t){this.eventHorizon=t},e.prototype.calculateDerivative=function(t){var e=this;return this.particles.forEach((function(e,i){var o=e.getVelocity();t.set(i,[o.x,o.y,o.z,0,0,0])})),this.forces.forEach((function(i){for(var o=1;o<e.particles.length;o++)if(e.particles[o].getType()==s.SpaceParticle.PHOTON){var r=i.apply(e.particles[o],e.particles[0]);t.add(o,[0,0,0,r[0].x,r[0].y,r[0].z]),t.add(0,[0,0,0,r[1].x,r[1].y,r[1].z])}}),this),t},e.prototype.updateAllParticles=function(){var t=this;this.particles.forEach((function(e,i){if(t.particles[i].getType()==s.SpaceParticle.PHOTON){var o=t.derivative.get(i),r=e.getPosition(),n=e.getVelocity();e.setPosition(r.x+o[0],r.y+o[1],r.z+o[2]),e.setVelocity(n.x+o[3],n.y+o[4],n.z+o[5])}}),this)},e.prototype.updateHook=function(){for(var t=this.particles.length-1;t>0;t--){var e=this.particles[0];(new a.Vector3).subVectors(e.getPosition(),this.particles[t].getPosition()).length()<this.eventHorizon&&(this.particles[t].onDeath(),this.removeParticle(t))}},e}(n.ParticleSystem);e.BlackHoleParticleSystem=h},Ysi0:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TimeProfiler=void 0;var o=i("4xLO"),r=function(){function t(){this.timeProfiles=new Map}return t.prototype.start=function(t,e){if(void 0===e&&(e=1),this.timeProfiles.has(t))this.timeProfiles.get(t).start();else{var i=new o.TimeProfile(t,e);this.timeProfiles.set(t,i),i.start()}},t.prototype.stop=function(t,e){if(void 0===e&&(e=1),this.timeProfiles.has(t))this.timeProfiles.get(t).stop();else{var i=new o.TimeProfile(t,e);this.timeProfiles.set(t,i),i.stop()}},t}();e.TimeProfiler=r},anZJ:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.VariableRayEmitter=void 0;var o=i("Womt"),r=function(){function t(t,e,i){this.N_REGION_LEN=16,this.MAX_EMISSIONS_FROM_PIXEL=1,this.resolution=t,this.pixelMap=new Array(t.x*t.y),this.rayEmittedCount=new Array(t.x*t.y);for(var r=0;r<this.rayEmittedCount.length;r++)this.rayEmittedCount[r]=0;this.regions=new Array,this.raytracer=e,this.generator=i,this.divideAndRassignPixels(new o.Vector2(0,0),new o.Vector2(t.x,t.y))}return t.prototype.emit=function(){for(var t=this.regions.length/2,e=new Array,i=0;i<t;i++){var o=this.regions[2*i],r=this.regions[2*i+1],n=this.emitFromRegion(o,r);e.push(n)}return e},t.prototype.test=function(){this.divideAndRassignPixels(new o.Vector2(0,0),new o.Vector2(64,64)),console.log("The pixel map",this.pixelMap),console.log("Regions",this.regions)},t.prototype.divideAndRassignPixels=function(t,e){var i=this.regions.length,o=e.x-t.x,r=e.y-t.y;if(!(o<=1||r<=1)){this.divide(t,o,r);for(var n=0;n<this.N_REGION_LEN*this.N_REGION_LEN;n++)for(var s=this.regions[i+2*n],a=this.regions[i+2*n+1],c=Math.floor(a.x),h=Math.floor(s.x);h<c;h++)for(var p=Math.floor(a.y),u=Math.floor(s.y);u<p;u++){var l=u*this.resolution.x+h;this.pixelMap[l]=i+2*n}}},t.prototype.divide=function(t,e,i){for(var r=this.N_REGION_LEN*this.N_REGION_LEN,n=0;n<r;n++){var s=n%this.N_REGION_LEN,a=Math.floor(n/this.N_REGION_LEN),c=new o.Vector2(e*(s/this.N_REGION_LEN),i*(a/this.N_REGION_LEN)),h=new o.Vector2(e*((s+1)/this.N_REGION_LEN),i*((a+1)/this.N_REGION_LEN));c.add(t),h.add(t),this.regions.push(c),this.regions.push(h)}},t.prototype.emitFrom=function(t,e){var i=this.getRegion(t,e);return this.emitFromRegion(i[0],i[1])},t.prototype.incrementPixelCount=function(t,e){var i=e*this.resolution.x+t;this.rayEmittedCount[i]++},t.prototype.hasExceededRayCount=function(t,e){var i=e*this.resolution.x+t,o=this.MAX_EMISSIONS_FROM_PIXEL;return this.rayEmittedCount[i]>o},t.prototype.emitFromRegion=function(t,e){var i=Math.floor(t.x+Math.random()*(e.x-t.x)),o=Math.floor(t.y+Math.random()*(e.y-t.y));return this.emitFromPixel(i,o)},t.prototype.emitFromPixel=function(t,e){if(this.hasExceededRayCount(t,e))return null;Math.random();Math.random();var i=(t+0)/this.resolution.x*this.raytracer.getWidth()-this.raytracer.getWidth()/2,r=(e+0)/this.resolution.y*this.raytracer.getHeight()-this.raytracer.getHeight()/2,n=this.raytracer.getDistanceToCanvas(),s=new o.Vector3(i,r,n);s.applyQuaternion(this.raytracer.getRotation()),this.generator.parameter(t,e,s);var a=this.generator.generate();return a.setPosition(this.raytracer.getPosition().x,this.raytracer.getPosition().y,this.raytracer.getPosition().z),this.incrementPixelCount(t,e),a},t.prototype.getRegionIndex=function(t,e){var i=e*this.resolution.x+t;return this.pixelMap[i]},t.prototype.getRegion=function(t,e){var i=this.getRegionIndex(t,e);return[this.regions[i],this.regions[i+1]]},t.prototype.objectWasHit=function(t,e){var i=this.getRegion(t,e),o=this.regions.length;this.divideAndRassignPixels(i[0],i[1]);for(var r=o;r<this.regions.length;r+=2){var n=this.emitFromRegion(this.regions[r],this.regions[r+1]);this.raytracer.postEmit(n)}},t}();e.VariableRayEmitter=r},bJLd:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Octree=void 0;var o=i("Womt"),r=function(){function t(t,e,i,o,r,n){void 0===o&&(o=0),void 0===r&&(r=Number.POSITIVE_INFINITY),void 0===n&&(n=0),this.MAX_OBJECTS_IN_NODE=3,this.minDiagLength=0,this.maxDepth=Number.POSITIVE_INFINITY,this.depth=0,this.node=new Array,this.setMinDiagLength(o),this.create(t,e,i),this.corners=new Array(2),this.corners[0]=e,this.corners[1]=i,this.maxDepth=r,this.depth=n}return t.prototype.setMinDiagLength=function(t){this.minDiagLength=t},t.prototype.create=function(e,i,r){this.objects=e;var n=[r.x-i.x,r.y-i.y,r.z-i.z],s=n[0]*n[0]+n[1]*n[1]+n[2]*n[2];if(s/=4,!(e.length<=this.MAX_OBJECTS_IN_NODE||this.minDiagLength>=s||this.depth>=this.maxDepth)){var a=new Array,c=(new o.Vector3).addVectors(i,r).multiplyScalar(.5);a.push(i),a.push(c),n.forEach((function(t,e){for(var i=a.length,o=0;o<i;o++){var r=a[o].clone(),n=r.toArray();n[e]=n[e]+t/2,r.fromArray(n),a.push(r)}}));for(var h=function(i){var o=new Array;e.forEach((function(t){t.intersectsWithBox(a[2*i],a[2*i+1])&&o.push(t)})),o.length>0&&o.length<e.length&&p.node.push(new t(o,a[2*i],a[2*i+1],p.minDiagLength,p.maxDepth,p.depth+1))},p=this,u=0;u<8;u++)h(u)}},t.prototype.find=function(t){if(this.contains(t)){for(var e=0;e<this.node.length;e++){var i=this.node[e].find(t);if(null!==i)return i}return this}return null},t.prototype.findRay=function(t,e){if(this.contains(t)&&this.contains(e)){if(0==this.node.length)return this;for(var i=0;i<this.node.length;i++){var o=this.node[i].findRay(t,e);if(null!==o)return o}}return null},t.prototype.contains=function(t){return!(t.x>Math.max(this.corners[0].x,this.corners[1].x))&&(!(t.y>Math.max(this.corners[0].y,this.corners[1].y))&&(!(t.z>Math.max(this.corners[0].z,this.corners[1].z))&&(!(t.x<Math.min(this.corners[0].x,this.corners[1].x))&&(!(t.y<Math.min(this.corners[0].y,this.corners[1].y))&&!(t.z<Math.min(this.corners[0].z,this.corners[1].z))))))},t.prototype.getObjects=function(){return this.objects},t}();e.Octree=r},bQUK:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ScaledUnits=void 0;var o=function(){function t(t,e,i){void 0===t&&(t=1),void 0===e&&(e=1),void 0===i&&(i=1),this._metres=t,this._kilograms=e,this._seconds=i}return t.prototype.setMetresScale=function(t,e){void 0===e&&(e=1),this._metres=t/e},t.prototype.setKgsScale=function(t,e){void 0===e&&(e=1),this._kilograms=t/e},t.prototype.setTimeScale=function(t,e){void 0===e&&(e=1),this._seconds=t/e},Object.defineProperty(t.prototype,"metres",{get:function(){return this._metres},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"kgs",{get:function(){return this._kilograms},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"seconds",{get:function(){return this._seconds},enumerable:!1,configurable:!0}),t.prototype.getScaledDistance=function(t){return t/this._metres},t.prototype.getScaledMass=function(t){return t/this._kilograms},t.prototype.getScaledTime=function(t){return t/this._seconds},t.prototype.getUnscaledTime=function(t){return t*this._seconds},t.prototype.getScaledVelocity=function(t){return t*this.seconds/this.metres},t.prototype.getUnscaledVelocity=function(t){return t*this._metres/this._seconds},t}();e.ScaledUnits=o},bYUt:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Particle=void 0;var o=i("Womt"),r=function(){function t(t,e,i,r){void 0===t&&(t=1),void 0===e&&(e=1),void 0===i&&(i=0),void 0===r&&(r=1),this.velocity=new o.Vector3,this.position=new o.Vector3,this.mass=t,this.radius=e,this.lifeSpan=i,this.age=0,this.type=r,this.alive=!0}return t.prototype.intersectsWithBox=function(t,e){var i=this.getPosition();return!(i.x>Math.max(t.x,e.x)+this.getRadius())&&(!(i.y>Math.max(t.y,e.y)+this.getRadius())&&(!(i.z>Math.max(t.z,e.z)+this.getRadius())&&(!(i.x<Math.min(t.x,e.x)-this.getRadius())&&(!(i.y<Math.min(t.y,e.y)-this.getRadius())&&!(i.z<Math.min(t.z,e.z)-this.getRadius())))))},t.prototype.setRadius=function(t){return this.radius=t,this.radius},t.prototype.isAlive=function(){return this.alive},t.prototype.intersectsWithRay=function(t,e,i){var r=(new o.Vector3).subVectors(e,t).normalize(),n=this.getPosition().sub(t),s=this.getPosition().sub(e),a=n.dot(r),c=s.dot(r);if(a*c>0){var h=Math.min(Math.abs(a),Math.abs(c)),p=Math.max(Math.abs(a),Math.abs(c));if((h=h-this.radius-i)*p>0)return!1}return n.sub(r.multiplyScalar(a)).length()<=this.getRadius()+i},t.prototype.copy=function(t){this.velocity=t.getVelocity(),this.position=t.getPosition(),this.age=t.getAge(),this.mass=t.getMass(),this.radius=t.getRadius(),this.lifeSpan=t.getLifespan(),this.type=t.getType()},t.prototype.getType=function(){return this.type},t.prototype.setType=function(t){return this.type=t,t},t.prototype.update=function(){},t.prototype.setLifespan=function(t){return this.lifeSpan=t,this.lifeSpan},t.prototype.setAge=function(t){return this.age=t,this.age},t.prototype.getLifespan=function(){return this.lifeSpan},t.prototype.getAge=function(){return this.age},t.prototype.getMass=function(){return this.mass},t.prototype.setMass=function(t){this.mass=t},t.prototype.getVelocity=function(){return this.velocity.clone()},t.prototype.getPosition=function(){return this.position.clone()},t.prototype.setPosition=function(t,e,i){return this.position.set(t,e,i)},t.prototype.setVelocity=function(t,e,i){return this.velocity.set(t,e,i)},t.prototype.getRadius=function(){return this.radius},t.prototype.onDeath=function(){this.alive=!1},t}();e.Particle=r},fyR2:function(t,e,i){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0}),e.SpaceParticleGenerator=e.SpaceParticle=void 0;var n=i("Womt"),s=i("bYUt"),a=i("KD8D"),c=i("Uj6v"),h=function(){function t(t,e,i,o){this.particle=new s.Particle(e,.21);var r=new c.PhotonGenerator;r.setSpeedOfLight(o.getScaledVelocity(r.speedOfLight)),this.generator=r,this.ps=i}return t.prototype.intersectsWithBox=function(t,e){return this.particle.intersectsWithBox(t,e)},t.prototype.setRadius=function(t){return this.particle.setRadius(t)},t.prototype.intersectsWithRay=function(t,e,i){return this.particle.intersectsWithRay(t,e,i)},t.prototype.isAlive=function(){return this.particle.isAlive()},t.prototype.copy=function(t){this.particle.copy(t)},t.prototype.setType=function(t){return this.particle.setType(t)},t.prototype.getType=function(){return this.particle.getType()},t.prototype.update=function(){},t.prototype.getMass=function(){return this.particle.getMass()},t.prototype.setMass=function(t){this.particle.setMass(t)},t.prototype.getVelocity=function(){return this.particle.getVelocity()},t.prototype.getPosition=function(){return this.particle.getPosition()},t.prototype.setVelocity=function(t,e,i){return this.particle.setVelocity(t,e,i)},t.prototype.getRadius=function(){return this.particle.getRadius()},t.prototype.getLifespan=function(){return this.particle.getLifespan()},t.prototype.setLifespan=function(t){return this.particle.setLifespan(t)},t.prototype.getAge=function(){return this.particle.getAge()},t.prototype.setAge=function(t){return this.particle.setAge(t)},t.prototype.onDeath=function(){this.particle.onDeath()},t.prototype.setPosition=function(t,e,i){return this.generator.setPosition(new n.Vector3(t,e,i)),this.particle.setPosition(t,e,i)},t.PHOTON=1010,t}();e.SpaceParticle=h;var p=function(t){function e(e,i,o,r){var n=t.call(this)||this;return n.scene=e,n.ps=i,n.units=o,n.generator=r,n}return r(e,t),e.prototype.setGenerator=function(t){this.generator=t},e.prototype.generate=function(){var e;e=this.generator?this.generator.generate():t.prototype.generate.call(this);var i=new h(this.scene,e.getMass(),this.ps,this.units),o=e.getPosition().add(this.position);return i.setVelocity(e.getVelocity().x,e.getVelocity().y,e.getVelocity().z),i.setPosition(o.x,o.y,o.z),i.setLifespan(e.getLifespan()),i.setType(e.getType()),i.setRadius(2),i},e}(a.ParticleGenerator);e.SpaceParticleGenerator=p},kEKz:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BlackHoleSystem=void 0;var o=i("XZJ1"),r=i("fyR2"),n=i("Womt"),s=i("bQUK"),a=i("DFd6"),c=i("W87h"),h=i("bYUt"),p=i("BNAQ"),u=i("/5+L"),l=i("u0N3"),y=i("bJLd"),f=i("4xLO"),d=function(){function t(t){this.MIN_ACCRETION_DISK_VEL=199792458,this.MAX_ACCRETION_DISK_VEL=299792458,this.BLACK_HOLE_MASS=43e5,this.RESOLUTION=512,this.totalTime=0,this.count=0,this.timeBefore=0,this.ps=new o.BlackHoleParticleSystem,this.psprofiler=new f.TimeProfile("Particle System",1e3),this.tracerprofiler=new f.TimeProfile("Raytracer",1e3)}return t.prototype.initializeSystem=function(t){this.units=new s.ScaledUnits(1496e6,1.989e30,1),console.log(this.units.getScaledVelocity(this.MIN_ACCRETION_DISK_VEL)),this.blackHole=new a.VisibleParticle(t,"blackHole","#ffffff",1,this.BLACK_HOLE_MASS);var e=new c.GravityForce(c.GravityForce.calculate(this.units.kgs,this.units.metres,this.units.seconds));this.ps.addForce(e),this.ps.addParticle(this.blackHole),this.initializeParticleGenerator(t),this.ps.setEventHorizon(this.getSchwarzchildRadius()),this.ps.setBounds(new n.Vector3(-50,-50,-50),new n.Vector3(50,50,200)),this.raytracer=new u.RayTracer(t,new n.Vector3(0,0,100),new n.Vector3(0,0,-1),Math.PI/8,this.RESOLUTION,this.units.getScaledVelocity(299792458)),this.obstacles=new Array,this.emitParticles(),this.customizer=new l.ParticleSystemCustomizer(this.ps,this.raytracer,this.obstacles,0),this.raytracer.setCustomizer(this.customizer),this.raytracer.emitPhotons(),t.add(this.raytracer.getPhoto())},t.prototype.testOctree=function(){var t=new h.Particle;t.setPosition(-10,-10,-10),this.obstacles.push(t),(t=new h.Particle).setPosition(10,10,10),this.obstacles.push(t),(t=new h.Particle).setPosition(-10,-10,10),this.obstacles.push(t),(t=new h.Particle).setPosition(-10,10,10),this.obstacles.push(t);new y.Octree(this.obstacles,new n.Vector3(-20,-20,-20),new n.Vector3(20,20,20)).find(t.getPosition())},t.prototype.getSchwarzchildRadius=function(t){void 0===t&&(t=this.BLACK_HOLE_MASS);var e=this.units.getScaledVelocity(299792458),i=2*new c.GravityForce(c.GravityForce.calculate(this.units.kgs,this.units.metres,this.units.seconds)).G*this.BLACK_HOLE_MASS/(e*e);return console.log("The Schwarzchild Radius is ",i),i},t.prototype.initializeParticleGenerator=function(t){var e=this.getSchwarzchildRadius(),i=new p.EllipticalParticleGenerator(1.5*e,1.5*e,this.blackHole.getPosition(),new n.Vector3(1,0,0),new n.Vector3(0,0,1),new n.Vector3(0,-1,0),this.units.getScaledVelocity(this.MIN_ACCRETION_DISK_VEL));i.setParameters(1e-4,15e-5,0),i.setWidth(3*e);var o=new r.SpaceParticleGenerator(t,this.ps,this.units,i);this.particleGenerator=o,this.particleGenerator.setPosition(new n.Vector3(0,0,0)),this.blackHole.addLightSource("#ffffff")},t.prototype.update=function(t){this.totalTime;for(var e=0;e<100;e++)this.ps.update(t),this.customizer.setTimeStep(t),this.raytracer.update(),this.totalTime+=t},t.prototype.emitParticles=function(){for(var t=0;t<100;){var e=this.particleGenerator.generate();this.ps.addParticle(e),this.obstacles.push(e),t++}},t.prototype.scaleVelocity=function(t){var e=this.units.getScaledVelocity(t.getVelocity().length()),i=t.getVelocity().normalize().multiplyScalar(e);console.log(i),t.setVelocity(i.x,i.y,i.z)},t}();e.BlackHoleSystem=d},lelv:function(t,e,i){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0}),e.BlackHoleStarter=void 0;var n=i("zq37"),s=i("kEKz"),a=i("kgy+"),c=function(t){function e(){return t.call(this)||this}return r(e,t),e.prototype.postInitHook=function(){this.system=new s.BlackHoleSystem(this.scene),this.system.initializeSystem(this.scene),this.controls=new a.TrackballControls(this.camera,this.renderer.domElement)},e.prototype.animateHook=function(){this.time_step=.06,this.system.update(this.time_step),this.controls.update()},e}(n.Boilerplate);e.BlackHoleStarter=c},ltrx:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ParticleSystem=e.ParticleDerivative=void 0;var o=i("Ysi0"),r=function(){function t(){this.derivative=new Array}return t.prototype.length=function(){return this.derivative.length},t.prototype.addParticle=function(){this.derivative.push(new Array(0,0,0,0,0,0))},t.prototype.add=function(t,e){for(var i=0;i<e.length;i++)this.derivative[t][i]+=e[i]},t.prototype.remove=function(t){this.derivative.splice(t,1)},t.prototype.clear=function(){for(var t=0;t<this.derivative.length;t++)for(var e=0;e<this.derivative[t].length;e++)this.derivative[t][e]=0},t.prototype.set=function(t,e){for(var i=0;i<e.length;i++)this.derivative[t][i]=e[i]},t.prototype.scale=function(t){for(var e=0;e<this.derivative.length;e++)for(var i=0;i<this.derivative[e].length;i++)this.derivative[e][i]*=t},t.prototype.get=function(t){return this.derivative[t]},t.prototype.print=function(){this.derivative.forEach((function(t,e){console.log("Particle "+e),console.log("Velocity ",t[0],t[1],t[2]),console.log("Acceleration ",t[3],t[4],t[5])}),this)},t.prototype.printCount=function(){console.log(this.derivative.length)},t.prototype.destroy=function(){this.derivative.forEach((function(t){[]})),this.derivative=[]},t.prototype.clone=function(e){if(e)return this.cacheClone(e);var i=new t;return this.derivative.forEach((function(t,e){i.addParticle(),i.add(e,t)})),i},t.prototype.cacheClone=function(t){return this.derivative.forEach((function(e,i){t.add(i,e)})),t},t}();e.ParticleDerivative=r;var n=function(){function t(){this.particles=new Array,this.derivative=new r,this.forces=new Array,this.profiler=new o.TimeProfiler,this.createCaches()}return t.prototype.createCaches=function(){this.derivativeCaches=new Array(4);for(var t=0;t<4;t++)this.derivativeCaches[t]=new r},t.prototype.addParticle=function(t){var e=this;this.particles.push(t),this.derivative.addParticle(),this.derivativeCaches.forEach((function(t){e.derivative.length()>t.length()&&t.addParticle()}))},t.prototype.removeParticle=function(t){this.particles.splice(t,1),this.derivative.remove(t)},t.prototype.printCOunt=function(){console.log("Particle Count %s Derivative count %s",this.particles.length,this.derivative.length())},t.prototype.addForce=function(t){this.forces.push(t)},t.prototype.update=function(t){this.updateMidPoint(t),this.updateHook(),this.postUpdate(),this.updateParticleLives(t),this.boundsCheck()},t.prototype.updateHook=function(){},t.prototype.postUpdate=function(){for(var t=this.particles.length,e=0;e<t;e++){var i=t-e-1,o=this.particles[i];o.update(),o.isAlive()||this.removeParticle(i)}},t.prototype.setBounds=function(t,e){this.minBounds=t,this.maxBounds=e},t.prototype.updateParticleLives=function(t){for(var e=this.particles.length-1;e>=0;e--){var i=this.particles[e];i.setAge(i.getAge()+t),i.getLifespan()>0&&i.getAge()>i.getLifespan()&&(i.onDeath(),this.removeParticle(e))}},t.prototype.boundsCheck=function(){if(this.minBounds&&this.maxBounds)for(var t=this.particles.length-1;t>=0;t--){var e=this.particles[t];(e.getPosition().x>this.maxBounds.x||e.getPosition().y>this.maxBounds.y||e.getPosition().x<this.minBounds.x||e.getPosition().y<this.minBounds.y||e.getPosition().z<this.minBounds.z||e.getPosition().z>this.maxBounds.z)&&(e.onDeath(),this.removeParticle(t))}},t.prototype.storeState=function(){var t=new Array;return this.particles.forEach((function(e,i){var o=e.getPosition(),r=e.getVelocity();t.push(new Array(o.x,o.y,o.z,r.x,r.y,r.z))}),this),t},t.prototype.restoreState=function(t){this.particles.forEach((function(e,i){e.setPosition(t[i][0],t[i][1],t[i][2]),e.setVelocity(t[i][3],t[i][4],t[i][5])}),this)},t.prototype.updateMidPoint=function(t){var e=this.storeState();this.derivative=this.calculateDerivative(this.derivative),this.derivative.scale(t/2),this.updateAllParticles(),this.derivative=this.calculateDerivative(this.derivative),this.derivative.scale(t),this.restoreState(e),this.updateAllParticles()},t.prototype.updateRK4=function(t){var e=this.derivative,i=this.storeState();this.derivativeCaches[0]=this.calculateDerivative(this.derivativeCaches[0]),this.derivativeCaches[0].scale(t/2);var o=this.derivativeCaches[0];this.derivative=o,this.updateAllParticles(),this.derivativeCaches[1]=this.calculateDerivative(this.derivativeCaches[1]),this.derivativeCaches[1].scale(t/2);var r=this.derivativeCaches[1];this.derivative=r,this.restoreState(i),this.updateAllParticles(),this.derivativeCaches[2]=this.calculateDerivative(this.derivativeCaches[2]),this.derivativeCaches[2].scale(t);var n=this.derivativeCaches[2];this.derivative=n,this.restoreState(i),this.updateAllParticles(),this.derivativeCaches[3]=this.calculateDerivative(this.derivativeCaches[3]),this.derivativeCaches[3].scale(t);var s=this.derivativeCaches[3];this.derivative=s,this.restoreState(i),o.scale(1/3),this.derivative=o,this.updateAllParticles(),r.scale(2/3),this.derivative=r,this.updateAllParticles(),n.scale(1/3),this.derivative=n,this.updateAllParticles(),s.scale(1/6),this.derivative=s,this.updateAllParticles(),this.derivative=e},t.prototype.calculateDerivative=function(t){var e=this;return t.clear(),this.particles.forEach((function(e,i){t.add(i,[e.getVelocity().x,e.getVelocity().y,e.getVelocity().z,0,0,0])})),this.forces.forEach((function(i){for(var o=1;o<e.particles.length;o++)for(var r=0;r<o;r++){var n=i.apply(e.particles[o],e.particles[r]);t.add(o,[0,0,0,n[0].x,n[0].y,n[0].z]),t.add(r,[0,0,0,n[1].x,n[1].y,n[1].z])}}),this),t},t.prototype.updateAllParticles=function(){var t=this;this.particles.forEach((function(e,i){var o=t.derivative.get(i),r=e.getPosition(),n=e.getVelocity();e.setPosition(r.x+o[0],r.y+o[1],r.z+o[2]),e.setVelocity(n.x+o[3],n.y+o[4],n.z+o[5])}),this)},t.prototype.print=function(){console.log("----Particle System-----"),this.particles.forEach((function(t,e){console.log("--------------------------");var i=t.getPosition(),o=t.getVelocity();console.log("Particle "+e),console.log("Mass ",t.getMass()),console.log("Position ",i.x,i.y,i.z),console.log("Velocity ",o.x,o.y,o.z)}),this),console.log("------------X-----------")},t.prototype.printDerivative=function(){this.derivative.print()},t.prototype.destroy=function(){this.particles=[],this.forces=[],this.derivative.destroy()},t}();e.ParticleSystem=n},t9Jl:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EllipticalPositionGenerator=void 0;var o=i("Womt"),r=function(){function t(t,e,i,r,n,s){this.transformMatrix=new o.Matrix4,this.transformMatrixInv=new o.Matrix4,this.width=0,this.A=t,this.B=e,void 0!==r&&void 0!==n&&void 0!==s&&(this.transformMatrix.makeBasis(r,n,s),this.transformMatrix.transpose()),i&&(i.applyMatrix4(this.transformMatrixInv.getInverse(this.transformMatrix)),this.transformMatrix.setPosition(i)),this.transformMatrixInv.getInverse(this.transformMatrix)}return t.prototype.setWidth=function(t){this.width=t},t.prototype.generate=function(){new o.Vector3;var t=2*Math.PI*Math.random(),e=new o.Vector3((this.A+this.width*Math.random())*Math.cos(t),(this.width*Math.random()+this.B)*Math.sin(t));return e.applyMatrix4(this.transformMatrixInv),e},t}();e.EllipticalPositionGenerator=r},u0N3:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ParticleSystemCustomizer=void 0;var o=i("5OmT"),r=function(){function t(t,e,i,r){this.rays=new Array,this.particleSystem=t,this.collisionManager=new o.RayTracingCollisionManager(e),this.collisionManager.setRays(this.rays),this.time_step=r,this.collisionManager.setObstacles(i),this.raytracer=e}return t.prototype.postEmit=function(t){null!=t&&(this.particleSystem.addParticle(t),this.rays.push(t))},t.prototype.setTimeStep=function(t){this.time_step=t},t.prototype.update=function(){for(var t=this.rays.length-1;t>=0;t--){var e=this.rays[t];e.isAlive()||(this.rays.splice(t,1),this.raytracer.emitFrom(e.getOriginPixel().x,e.getOriginPixel().y))}this.collisionManager.update(this.time_step)},t}();e.ParticleSystemCustomizer=r},wBSO:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FixedPositionGenerator=void 0;var o=function(){function t(t){this.pos=t}return t.prototype.generate=function(){return this.pos},t}();e.FixedPositionGenerator=o},zq37:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Boilerplate=void 0;var o=i("Womt"),r=function(){function t(){this.mouse={x:0,y:0};var t=document.createElement("div");this.raycaster=new o.Raycaster,document.body.appendChild(t),this.renderer=new o.WebGLRenderer;var e=window.innerWidth,i=window.innerHeight;this.renderer.setSize(e,i),t.appendChild(this.renderer.domElement),console.log(window.devicePixelRatio),this.aspectRatio=window.innerWidth/window.innerHeight,this.camera=new o.PerspectiveCamera(45,window.innerWidth/window.innerHeight,1,2e4),this.camera.position.set(0,0,200),this.camera.lookAt(0,0,0),this.scene=new o.Scene,this.scene.background=new o.Color("#000000"),console.log(window.innerWidth,window.innerHeight),window.addEventListener("resize",this.onWindowResize.bind(this),!1),this.postInitHook()}return t.prototype.postInitHook=function(){},t.prototype.onWindowResize=function(){var t=window.innerWidth,e=window.innerHeight;this.camera.aspect=t/e,this.camera.updateProjectionMatrix(),this.aspectRatio=t/e,document.body.style.maxWidth=t+"px",document.body.style.maxHeight=e+"px",this.renderer.setSize(t,e)},t.prototype.animate=function(){this.animateHook(),requestAnimationFrame(this.animate.bind(this)),this.render(),this.t+=1},t.prototype.animateHook=function(){},t.prototype.render=function(){this.renderer.render(this.scene,this.camera)},t}();e.Boilerplate=r}},[["/7QA",1,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,